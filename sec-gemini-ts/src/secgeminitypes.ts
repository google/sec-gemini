/**
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

/**
 * Attachment
 * Represents a file upload to the session.
 */
export type Attachment = {
    /**
     * Session ID
     * The session ID this file should be attached to.
     */
    session_id: string;
    /**
     * Filename
     * The name of the file.
     */
    filename: string;
    /**
     * Mime Type
     * The mime type of the file. This is used as a hint, and it may be overridden.
     * @deprecated
     */
    mime_type?: string | null;
    /**
     * File Content
     * The content of the file as string. Always base64 encoded.
     */
    content: string;
};

/**
 * ChatCompletionRequest
 */
export type ChatCompletionRequest = {
    /**
     * Model
     */
    model: string;
    /**
     * Messages
     */
    messages: Array<OpenAiMessageInput>;
    /**
     * Temperature
     */
    temperature?: number | null;
    /**
     * Top P
     */
    top_p?: number | null;
    /**
     * N
     */
    n?: number | null;
    /**
     * Stream
     */
    stream?: boolean | null;
    /**
     * Max Tokens
     */
    max_tokens?: number | null;
    /**
     * Presence Penalty
     */
    presence_penalty?: number | null;
    /**
     * Frequency Penalty
     */
    frequency_penalty?: number | null;
    /**
     * User
     */
    user?: string | null;
    /**
     * Metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};

/**
 * ChatCompletionResponse
 */
export type ChatCompletionResponse = {
    /**
     * Id
     */
    id: string;
    /**
     * Object
     */
    object: string;
    /**
     * Created
     */
    created: number;
    /**
     * Model
     */
    model: string;
    /**
     * Choices
     */
    choices: Array<Choice>;
    usage: OpenAiUsage;
};

/**
 * Choice
 */
export type Choice = {
    /**
     * Index
     */
    index: number;
    message: OpenAiMessageOutput;
    /**
     * Finish Reason
     */
    finish_reason: string;
};

/**
 * DetachFileRequest
 * Represents a file upload to the session.
 */
export type DetachFileRequest = {
    /**
     * Session ID
     * The session ID this file should be deleted from.
     */
    session_id: string;
    /**
     * File index
     * File index to be removed.
     */
    file_idx: number;
};

/**
 * Feedback
 * Represents a feedback to the session.
 */
export type Feedback = {
    /**
     * Session ID
     * The session ID this feedback should be attached to.
     */
    session_id: string;
    /**
     * Group ID
     * The message group ID this feedback should be attached to.
     */
    group_id?: string;
    /**
     * Feedback Type
     * The type of feedback.
     */
    type: FeedbackType;
    /**
     * Score
     * The score of the feedback.
     */
    score: number;
    /**
     * Comment
     * The comment of the feedback.
     */
    comment: string;
};

/**
 * FeedbackType
 * Type of feedback that can be sent to the system.
 */
export type FeedbackType = 'user_feedback' | 'bug_report';

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * LocalTool
 * Normalized representation of a tool/function.
 */
export type LocalTool = {
    /**
     * Name
     * The unique name/identifier of the tool
     */
    name: string;
    /**
     * Description
     * Comprehensive description of what the tool does
     */
    description: string;
    /**
     * Schema defining the input parameters
     */
    parameters: Schema;
    /**
     * Schema defining the output/return value
     */
    returns?: Schema | null;
    /**
     * Version
     * Version identifier for this tool definition
     */
    version?: string | null;
    /**
     * Tags
     * List of tags for categorization
     */
    tags?: Array<string> | null;
};

/**
 * MediaModality
 * Server content modalities.
 */
export type MediaModality = 'MODALITY_UNSPECIFIED' | 'TEXT' | 'IMAGE' | 'VIDEO' | 'AUDIO' | 'DOCUMENT';

/**
 * Message
 * Represents the content of the session both in request and response.
 */
export type MessageInput = {
    /**
     * Message ID
     * A unique identifier for the message - uuid4 string.
     */
    id?: string;
    /**
     * Parent Message ID
     * The ID of the parent message.
     */
    parent_id?: string;
    /**
     * Conversation Turn
     * The turn identifier is used to group/message are part of the same conversation turn.
     */
    turn?: string;
    /**
     * Message Group
     * The Group ID (UUID4) identify messages part of the same generation or action.
     */
    group?: string;
    /**
     * Actor
     * The actor of the message - user or agent.
     */
    actor?: string;
    /**
     * The role of the messages author.
     */
    role?: Role;
    /**
     * Timestamp
     * DEPRECATED: The Unix timestamp (in seconds) of when the message was created.
     */
    timestamp?: number;
    /**
     * Creation timestamp
     * The Unix timestamp (in seconds, including fractional parts) indicating when the message was created.
     */
    created_at?: number;
    /**
     * Message Type
     * The type of message - Generation, Tool Call, or Info.
     */
    message_type: MessageType;
    /**
     * Icon
     * Custom svg icon to use in the UI.
     */
    icon?: string | null;
    /**
     * Text Color
     * Custom text color to use in the UI.
     */
    text_color?: string | null;
    /**
     * Title
     * Descripting title of the message.
     */
    title?: string | null;
    /**
     * The state the message belongs to.
     */
    state?: State;
    /**
     * Message Content
     * The content of the message encoded as utf-8 bytes.
     */
    content?: string | null;
    /**
     * Content Type
     * The content type of the content field.
     */
    mime_type?: MimeType | null;
    /**
     * Status Code
     * The status code of the message. 2xx is Okay, 4xx is a client error, 5xx is a server error.
     */
    status_code?: number;
    /**
     * Status Message
     * Explain status code reason.
     */
    status_message?: string;
    /**
     * Model Usage Statistics
     * Token counts when message was generated by model.
     */
    usage?: UsageInput | null;
};

/**
 * Message
 * Represents the content of the session both in request and response.
 */
export type MessageOutput = {
    /**
     * Message ID
     * A unique identifier for the message - uuid4 string.
     */
    id?: string;
    /**
     * Parent Message ID
     * The ID of the parent message.
     */
    parent_id?: string;
    /**
     * Conversation Turn
     * The turn identifier is used to group/message are part of the same conversation turn.
     */
    turn?: string;
    /**
     * Message Group
     * The Group ID (UUID4) identify messages part of the same generation or action.
     */
    group?: string;
    /**
     * Actor
     * The actor of the message - user or agent.
     */
    actor?: string;
    /**
     * The role of the messages author.
     */
    role?: Role;
    /**
     * Timestamp
     * DEPRECATED: The Unix timestamp (in seconds) of when the message was created.
     */
    timestamp?: number;
    /**
     * Creation timestamp
     * The Unix timestamp (in seconds, including fractional parts) indicating when the message was created.
     */
    created_at?: number;
    /**
     * Message Type
     * The type of message - Generation, Tool Call, or Info.
     */
    message_type: MessageType;
    /**
     * Icon
     * Custom svg icon to use in the UI.
     */
    icon?: string | null;
    /**
     * Text Color
     * Custom text color to use in the UI.
     */
    text_color?: string | null;
    /**
     * Title
     * Descripting title of the message.
     */
    title?: string | null;
    /**
     * The state the message belongs to.
     */
    state?: State;
    /**
     * Message Content
     * The content of the message encoded as utf-8 bytes.
     */
    content?: string | null;
    /**
     * Content Type
     * The content type of the content field.
     */
    mime_type?: MimeType | null;
    /**
     * Status Code
     * The status code of the message. 2xx is Okay, 4xx is a client error, 5xx is a server error.
     */
    status_code?: number;
    /**
     * Status Message
     * Explain status code reason.
     */
    status_message?: string;
    /**
     * Model Usage Statistics
     * Token counts when message was generated by model.
     */
    usage?: UsageOutput | null;
};

/**
 * MessageType
 * Type of message
 */
export type MessageType = 'result' | 'source' | 'debug' | 'info' | 'error' | 'thinking' | 'update' | 'delete' | 'confirmation_request' | 'confirmation_response' | 'query' | 'local_tool_call' | 'local_tool_result';

/**
 * MimeType
 * Completion type
 */
export type MimeType = 'text/plain' | 'text/markdown' | 'text/serialized-json' | 'application/octet-stream' | 'image/jpeg' | 'image/png' | 'image/tiff' | 'image/gif' | 'image/svg+xml' | 'image/webp' | 'image/avif' | 'audio/wav' | 'audio/mpeg' | 'audio/ogg' | 'video/webm' | 'video/mp4' | 'text/c' | 'text/c++' | 'text/java' | 'text/rust' | 'text/go' | 'text/python' | 'text/php' | 'text/perl' | 'text/ruby' | 'text/swift' | 'text/kotlin' | 'text/scala' | 'text/javascript' | 'text/typescript' | 'text/html' | 'text/css' | 'text/csv' | 'text/xml' | 'text/yaml' | 'text/toml' | 'text/sql' | 'application/json' | 'application/jsonl' | 'application/pdf' | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' | 'application/vnd.openxmlformats-officedocument.presentationml.presentation' | 'application/msword' | 'application/vnd.ms-excel' | 'application/vnd.ms-powerpoint' | 'application/rtf' | 'application/vnd.oasis.opendocument.text' | 'sec-gemini/graph' | 'sec-gemini/timeline' | 'sec-gemini/table' | 'sec-gemini/image' | 'sec-gemini/code' | 'sec-gemini/markdown' | 'sec-gemini/json' | 'sec-gemini/html' | 'sec-gemini/canvas';

/**
 * ModalityTokenCount
 * Represents token counting info for a single modality.
 */
export type ModalityTokenCount = {
    /**
     * The modality associated with this token count.
     */
    modality?: MediaModality | null;
    /**
     * Token Count
     * Number of tokens.
     */
    token_count?: number | null;
};

/**
 * ModelInfo
 * Describes a Sec-Gemini model configuration.
 */
export type ModelInfoInput = {
    /**
     * Model name
     * The string used to identify the model.
     */
    model_name: string;
    /**
     * Model Version
     * The version of the model.
     */
    version: string;
    /**
     * Use Experimental
     * Whether to use experimental sub agents and tools.
     */
    use_experimental?: boolean;
    /**
     * Model String
     * The string used to identify a model configuration.
     */
    model_string: string;
    /**
     * Model Description
     * A brief description of the model.
     */
    description?: string | null;
    /**
     * Tools
     * Toggable tools used by the model.
     */
    toolsets?: Array<OptionalToolSet>;
};

/**
 * ModelInfo
 * Describes a Sec-Gemini model configuration.
 */
export type ModelInfoOutput = {
    /**
     * Model name
     * The string used to identify the model.
     */
    model_name: string;
    /**
     * Model Version
     * The version of the model.
     */
    version: string;
    /**
     * Use Experimental
     * Whether to use experimental sub agents and tools.
     */
    use_experimental?: boolean;
    /**
     * Model String
     * The string used to identify a model configuration.
     */
    model_string: string;
    /**
     * Model Description
     * A brief description of the model.
     */
    description?: string | null;
    /**
     * Tools
     * Toggable tools used by the model.
     */
    toolsets?: Array<OptionalToolSet>;
};

/**
 * OpResult
 */
export type OpResult = {
    /**
     * Operation Result
     * True if the operation was successful.
     */
    ok: boolean;
    /**
     * Status Code
     * HTTP status code to return.
     */
    status_code: ResponseStatus;
    /**
     * Error Message
     * Describe why the operation failed.
     */
    status_message?: string;
    /**
     * Optional data
     * Optional field for additional information.
     */
    data?: {
        [key: string]: unknown;
    } | null;
    /**
     * Data Type
     * The type of data in the data field.
     */
    mime_type?: MimeType | null;
    /**
     * Latency
     * The time taken to complete the request in seconds.
     */
    latency?: number | null;
};

/**
 * OpenAIContent
 */
export type OpenAiContent = {
    /**
     * Type
     */
    type: string;
    /**
     * Text
     */
    text: string;
};

/**
 * OpenAIFileContent
 */
export type OpenAiFileContent = {
    /**
     * Type
     */
    type: 'file';
    file: OpenAiFileDetails;
};

/**
 * OpenAIFileDetails
 */
export type OpenAiFileDetails = {
    /**
     * Filename
     */
    filename: string;
    /**
     * File Data
     */
    file_data: string;
};

/**
 * OpenAIImageContent
 */
export type OpenAiImageContent = {
    /**
     * Type
     */
    type: string;
    /**
     * Image Url
     */
    image_url: string | OpenAiImageDetails;
};

/**
 * OpenAIImageDetails
 */
export type OpenAiImageDetails = {
    /**
     * Url
     */
    url: string;
};

/**
 * OpenAIMessage
 */
export type OpenAiMessageInput = {
    /**
     * Role
     */
    role: 'system' | 'user' | 'assistant';
    /**
     * Content
     */
    content: string | Array<OpenAiContent | OpenAiImageContent | OpenAiFileContent>;
};

/**
 * OpenAIMessage
 */
export type OpenAiMessageOutput = {
    /**
     * Role
     */
    role: 'system' | 'user' | 'assistant';
    /**
     * Content
     */
    content: string | Array<OpenAiContent | OpenAiImageContent | OpenAiFileContent>;
};

/**
 * OpenAIUsage
 */
export type OpenAiUsage = {
    /**
     * Prompt Tokens
     */
    prompt_tokens: number;
    /**
     * Completion Tokens
     */
    completion_tokens: number;
    /**
     * Total Tokens
     */
    total_tokens: number;
};

/**
 * OptionalToolSet
 * Describes the toolsets of a Sec-Gemini model.
 */
export type OptionalToolSet = {
    /**
     * toolset Name
     * The name of the toolset.
     */
    name: string;
    /**
     * toolset Version
     * The version of the toolset.
     */
    version: number;
    /**
     * toolset Description
     * A brief description of the toolset.
     */
    description: string | null;
    /**
     * toolset Vendor
     * The vendor of the toolset.
     */
    vendor: ToolSetVendor;
    /**
     * Is Bundle Enabled by default
     * Whether the bundle is enabled by default or not.
     */
    is_enabled: boolean;
    /**
     * Is Bundle Enabled by default
     * Whether the bundle is enabled by default or not.
     */
    is_enabled_by_default: boolean;
    /**
     * Is Bundle Enabled by default in incognito mode?
     * Whether this tool is enabled in incognito mode by default.
     */
    is_enabled_by_default_in_incognito: boolean;
    /**
     * Is Experimental
     * Whether the toolset is experimental or not.
     */
    is_experimental: boolean;
};

/**
 * PublicLogsTable
 */
export type PublicLogsTable = {
    /**
     * Blake2s hash
     * The blake2s hash of the log file before upload. The hash key is 'secgemini'.
     */
    blake2s: string;
};

/**
 * PublicSession
 * Only add the fields necessary to show to users.
 */
export type PublicSessionInput = {
    /**
     * Session ID
     * Session unique ramdom identifier.
     */
    id?: string;
    /**
     * User ID
     * The user ID this session belongs to.
     */
    user_id: string;
    /**
     * Organization ID
     * The organization ID this session belongs to.
     */
    org_id: string;
    /**
     * Model
     * Model configuration used in the session.
     */
    model: ModelInfoInput;
    /**
     * Time to Live
     * The time to live of the session in seconds.
     */
    ttl: number;
    /**
     * Language
     * The iso-code of the session language.
     */
    language?: string;
    /**
     * Number of Turns
     * The number of turns in the session.
     */
    turns?: number;
    /**
     * Session Name
     * Human readable session name.
     */
    name: string;
    /**
     * Session Description
     * A brief description to help users remember what the session is about.
     */
    description: string;
    /**
     * Create Time
     * The Unix timestamp of when the session was created.
     */
    create_time?: number;
    /**
     * Update Time
     * The Unix timestamp of when the session was last updated.
     */
    update_time?: number;
    /**
     * Number of Messages
     * The number of messages in the session.
     */
    num_messages?: number;
    /**
     * Messages
     * The list of messages comprising the session so far.
     */
    messages?: Array<MessageInput>;
    /**
     * Session usage statistics.
     */
    usage?: UsageInput;
    /**
     * Can Log
     * Whether the session can be logged or not.
     */
    can_log: boolean;
    /**
     * The state the session belongs to.
     */
    state?: State;
    /**
     * Files
     * The list of files uploaded to the session.
     */
    files?: Array<PublicSessionFile>;
    /**
     * Logs Table
     * Logs table attached to the session, if any.
     */
    logs_table?: PublicLogsTable | null;
};

/**
 * PublicSession
 * Only add the fields necessary to show to users.
 */
export type PublicSessionOutput = {
    /**
     * Session ID
     * Session unique ramdom identifier.
     */
    id?: string;
    /**
     * User ID
     * The user ID this session belongs to.
     */
    user_id: string;
    /**
     * Organization ID
     * The organization ID this session belongs to.
     */
    org_id: string;
    /**
     * Model
     * Model configuration used in the session.
     */
    model: ModelInfoOutput;
    /**
     * Time to Live
     * The time to live of the session in seconds.
     */
    ttl: number;
    /**
     * Language
     * The iso-code of the session language.
     */
    language?: string;
    /**
     * Number of Turns
     * The number of turns in the session.
     */
    turns?: number;
    /**
     * Session Name
     * Human readable session name.
     */
    name: string;
    /**
     * Session Description
     * A brief description to help users remember what the session is about.
     */
    description: string;
    /**
     * Create Time
     * The Unix timestamp of when the session was created.
     */
    create_time?: number;
    /**
     * Update Time
     * The Unix timestamp of when the session was last updated.
     */
    update_time?: number;
    /**
     * Number of Messages
     * The number of messages in the session.
     */
    num_messages?: number;
    /**
     * Messages
     * The list of messages comprising the session so far.
     */
    messages?: Array<MessageOutput>;
    /**
     * Session usage statistics.
     */
    usage?: UsageOutput;
    /**
     * Can Log
     * Whether the session can be logged or not.
     */
    can_log: boolean;
    /**
     * The state the session belongs to.
     */
    state?: State;
    /**
     * Files
     * The list of files uploaded to the session.
     */
    files?: Array<PublicSessionFile>;
    /**
     * Logs Table
     * Logs table attached to the session, if any.
     */
    logs_table?: PublicLogsTable | null;
};

/**
 * PublicSessionFile
 * Only add the fields necessary to show to users.
 */
export type PublicSessionFile = {
    /**
     * Filename
     * Name of the file.
     */
    name: string;
    /**
     * File size
     * Size of the file in bytes.
     */
    size: number;
    /**
     * SHA256 of the file
     * SHA256 of the file.
     */
    sha256: string;
    /**
     * Mime type
     * Mime type.
     */
    mime_type: string;
    /**
     * Content type label
     * Content type label.
     */
    content_type_label?: string | null;
};

/**
 * PublicUser
 * Only add the fields necessary to show to users.
 */
export type PublicUser = {
    /**
     * User ID
     * The user ID this session belongs to.
     */
    id: string;
    /**
     * Organization ID
     * The organization ID this session belongs to.
     */
    org_id: string;
    /**
     * User Type
     * The type of user.
     */
    type?: UserType;
    /**
     * Never Log
     * The user session should never be logged.
     */
    never_log?: boolean;
    /**
     * Can Disable Logging
     * Is user authorized to disable logging.
     */
    can_disable_logging?: boolean;
    /**
     * Key Expire Time
     * The Unix timestamp (in seconds) of when the key will expire.
     */
    key_expire_time?: number;
    /**
     * TPM
     * Tokens per minute quota.
     */
    tpm?: number;
    /**
     * RPM
     * Requests per minute quota.
     */
    rpm?: number;
    /**
     * Allow Experimental
     * Whether the user is allowed to use experimental features.
     */
    allow_experimental?: boolean;
    /**
     * Vendors
     * The list of vendors the user has access to.
     */
    vendors?: Array<PublicUserVendor>;
};

/**
 * PublicUserVendor
 */
export type PublicUserVendor = {
    /**
     * Vendor Name
     */
    name: string;
    /**
     * Vendor Description
     */
    description: string;
    /**
     * Vendor URL
     */
    url: string;
    /**
     * Vendor SVG Icon
     */
    svg: string;
};

/**
 * ResponseStatus
 */
export type ResponseStatus = 200 | 201 | 202 | 204 | 206 | 300 | 301 | 302 | 303 | 304 | 307 | 308 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 422 | 425 | 426 | 428 | 429 | 431 | 451 | 500 | 501 | 502 | 503 | 504 | 505 | 506 | 507 | 508 | 510 | 511;

/**
 * Role
 * Describe the role associated with the completion
 */
export type Role = 'user' | 'agent' | 'system';

/**
 * Schema
 * Schema is used to define the format of input/output data.
 *
 * Represents a select subset of an [OpenAPI 3.0 schema
 * object](https://spec.openapis.org/oas/v3.0.3#schema-object). More fields may
 * be added in the future as needed.
 */
export type Schema = {
    /**
     * Additional Properties
     * Optional. Can either be a boolean or an object; controls the presence of additional properties.
     */
    additional_properties?: unknown | null;
    /**
     * Defs
     * Optional. A map of definitions for use by `ref` Only allowed at the root of the schema.
     */
    defs?: {
        [key: string]: Schema;
    } | null;
    /**
     * Ref
     * Optional. Allows indirect references between schema nodes. The value should be a valid reference to a child of the root `defs`. For example, the following schema defines a reference to a schema node named "Pet": type: object properties: pet: ref: #/defs/Pet defs: Pet: type: object properties: name: type: string The value of the "pet" property is a reference to the schema node named "Pet". See details in https://json-schema.org/understanding-json-schema/structuring
     */
    ref?: string | null;
    /**
     * Any Of
     * Optional. The value should be validated against any (one or more) of the subschemas in the list.
     */
    any_of?: Array<Schema> | null;
    /**
     * Default
     * Optional. Default value of the data.
     */
    default?: unknown | null;
    /**
     * Description
     * Optional. The description of the data.
     */
    description?: string | null;
    /**
     * Enum
     * Optional. Possible values of the element of primitive type with enum format. Examples: 1. We can define direction as : {type:STRING, format:enum, enum:["EAST", NORTH", "SOUTH", "WEST"]} 2. We can define apartment number as : {type:INTEGER, format:enum, enum:["101", "201", "301"]}
     */
    enum?: Array<string> | null;
    /**
     * Example
     * Optional. Example of the object. Will only populated when the object is the root.
     */
    example?: unknown | null;
    /**
     * Format
     * Optional. The format of the data. Supported formats: for NUMBER type: "float", "double" for INTEGER type: "int32", "int64" for STRING type: "email", "byte", etc
     */
    format?: string | null;
    /**
     * Optional. SCHEMA FIELDS FOR TYPE ARRAY Schema of the elements of Type.ARRAY.
     */
    items?: Schema | null;
    /**
     * Max Items
     * Optional. Maximum number of the elements for Type.ARRAY.
     */
    max_items?: number | null;
    /**
     * Max Length
     * Optional. Maximum length of the Type.STRING
     */
    max_length?: number | null;
    /**
     * Max Properties
     * Optional. Maximum number of the properties for Type.OBJECT.
     */
    max_properties?: number | null;
    /**
     * Maximum
     * Optional. Maximum value of the Type.INTEGER and Type.NUMBER
     */
    maximum?: number | null;
    /**
     * Min Items
     * Optional. Minimum number of the elements for Type.ARRAY.
     */
    min_items?: number | null;
    /**
     * Min Length
     * Optional. SCHEMA FIELDS FOR TYPE STRING Minimum length of the Type.STRING
     */
    min_length?: number | null;
    /**
     * Min Properties
     * Optional. Minimum number of the properties for Type.OBJECT.
     */
    min_properties?: number | null;
    /**
     * Minimum
     * Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER Minimum value of the Type.INTEGER and Type.NUMBER
     */
    minimum?: number | null;
    /**
     * Nullable
     * Optional. Indicates if the value may be null.
     */
    nullable?: boolean | null;
    /**
     * Pattern
     * Optional. Pattern of the Type.STRING to restrict a string to a regular expression.
     */
    pattern?: string | null;
    /**
     * Properties
     * Optional. SCHEMA FIELDS FOR TYPE OBJECT Properties of Type.OBJECT.
     */
    properties?: {
        [key: string]: Schema;
    } | null;
    /**
     * Property Ordering
     * Optional. The order of the properties. Not a standard field in open api spec. Only used to support the order of the properties.
     */
    property_ordering?: Array<string> | null;
    /**
     * Required
     * Optional. Required properties of Type.OBJECT.
     */
    required?: Array<string> | null;
    /**
     * Title
     * Optional. The title of the Schema.
     */
    title?: string | null;
    /**
     * Optional. The type of the data.
     */
    type?: Type | null;
};

/**
 * SessionRequest
 * Schema for the request body for triggering a model generation.
 */
export type SessionRequest = {
    /**
     * Session ID
     * The Session ID (UUID4) this request belongs to.
     */
    id?: string;
    /**
     * Messages
     * new query messages
     */
    messages: Array<MessageInput>;
    /**
     * Local Tools
     * The list of local tools available for this session.
     */
    local_tools?: Array<LocalTool>;
};

/**
 * SessionResponse
 */
export type SessionResponse = {
    /**
     * Session ID
     */
    id: string;
    /**
     * Response Messages
     */
    messages: Array<MessageOutput>;
    /**
     * Status Code
     * The status code of the message. 2xx is Okay, 4xx is a client error, 5xx is a server error.
     */
    status_code: number;
    /**
     * Status Message
     * Explain status code reason.
     */
    status_message: string;
    /**
     * Usage Statistics
     * Usage statistics for the message.
     */
    usage: UsageOutput;
};

/**
 * State
 */
export type State = 'undefined' | 'start' | 'end' | 'query' | 'running_agent' | 'agent_done' | 'coding' | 'code_result' | 'calling_tool' | 'tool_result' | 'generating' | 'answering' | 'thinking' | 'planning' | 'reviewing' | 'understanding' | 'retrieving' | 'grounding';

/**
 * ToolSetVendor
 * Vendor Toolsets info.
 */
export type ToolSetVendor = {
    /**
     * Vendor Name
     * The name of the vendor providing the tool or agent.
     */
    name: string;
    /**
     * Vendor Description
     * A brief description of the vendor.
     */
    description: string;
    /**
     * Vendor URL
     * The URL of vendor.
     */
    url: string;
    /**
     * Vendor SVG Icon
     * The SVG icon of the vendor.
     */
    svg: string;
};

/**
 * Type
 * Optional. The type of the field.
 */
export type Type = 'type_unspecified' | 'string' | 'number' | 'integer' | 'boolean' | 'array' | 'object' | 'null';

/**
 * Usage
 * Tracks token usage for a chat completion request and response.
 */
export type UsageInput = {
    /**
     * Prompt Tokens
     * Number of tokens in the prompt
     */
    prompt_tokens?: number;
    /**
     * Generated Tokens
     * Number of tokens used during generation
     */
    generated_tokens?: number;
    /**
     * Total Tokens
     * Total number of tokens used in the request (prompt + generation)
     */
    total_tokens?: number;
    /**
     * Cached Token Count
     * Number of tokens used in the cached response
     */
    cached_token_count?: number;
    /**
     * Thoughts Token Count
     * Number of tokens used in the thoughts
     */
    thoughts_token_count?: number;
    /**
     * Tool Use Prompt Token Count
     * Number of tokens used in the tool use prompt
     */
    tool_use_prompt_token_count?: number;
    /**
     * Prompt Tokens Details
     */
    prompt_tokens_details?: Array<ModalityTokenCount> | null;
};

/**
 * Usage
 * Tracks token usage for a chat completion request and response.
 */
export type UsageOutput = {
    /**
     * Prompt Tokens
     * Number of tokens in the prompt
     */
    prompt_tokens?: number;
    /**
     * Generated Tokens
     * Number of tokens used during generation
     */
    generated_tokens?: number;
    /**
     * Total Tokens
     * Total number of tokens used in the request (prompt + generation)
     */
    total_tokens?: number;
    /**
     * Cached Token Count
     * Number of tokens used in the cached response
     */
    cached_token_count?: number;
    /**
     * Thoughts Token Count
     * Number of tokens used in the thoughts
     */
    thoughts_token_count?: number;
    /**
     * Tool Use Prompt Token Count
     * Number of tokens used in the tool use prompt
     */
    tool_use_prompt_token_count?: number;
    /**
     * Prompt Tokens Details
     */
    prompt_tokens_details?: Array<ModalityTokenCount> | null;
};

/**
 * UserInfo
 */
export type UserInfo = {
    /**
     * User
     * The user information.
     */
    user: PublicUser;
    /**
     * Sessions
     * The list of users active sessions.
     */
    sessions?: Array<PublicSessionOutput>;
    /**
     * Available Models
     * The list of models available to the user.
     */
    available_models?: Array<ModelInfoOutput>;
};

/**
 * UserType
 * User type
 */
export type UserType = 'ui' | 'user' | 'admin' | 'system' | 'service';

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type RegisterV1SessionRegisterPostData = {
    body: PublicSessionInput;
    path?: never;
    query?: never;
    url: '/v1/session/register';
};

export type RegisterV1SessionRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterV1SessionRegisterPostError = RegisterV1SessionRegisterPostErrors[keyof RegisterV1SessionRegisterPostErrors];

export type RegisterV1SessionRegisterPostResponses = {
    /**
     * Successful Response
     */
    200: OpResult;
};

export type RegisterV1SessionRegisterPostResponse = RegisterV1SessionRegisterPostResponses[keyof RegisterV1SessionRegisterPostResponses];

export type UpdateV1SessionUpdatePostData = {
    body: PublicSessionInput;
    path?: never;
    query?: never;
    url: '/v1/session/update';
};

export type UpdateV1SessionUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateV1SessionUpdatePostError = UpdateV1SessionUpdatePostErrors[keyof UpdateV1SessionUpdatePostErrors];

export type UpdateV1SessionUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: OpResult;
};

export type UpdateV1SessionUpdatePostResponse = UpdateV1SessionUpdatePostResponses[keyof UpdateV1SessionUpdatePostResponses];

export type DeleteV1SessionDeletePostData = {
    body: PublicSessionInput;
    path?: never;
    query?: never;
    url: '/v1/session/delete';
};

export type DeleteV1SessionDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteV1SessionDeletePostError = DeleteV1SessionDeletePostErrors[keyof DeleteV1SessionDeletePostErrors];

export type DeleteV1SessionDeletePostResponses = {
    /**
     * Successful Response
     */
    200: OpResult;
};

export type DeleteV1SessionDeletePostResponse = DeleteV1SessionDeletePostResponses[keyof DeleteV1SessionDeletePostResponses];

export type ListSessionsV1SessionListGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/session/list';
};

export type ListSessionsV1SessionListGetResponses = {
    /**
     * Response List Sessions V1 Session List Get
     * Successful Response
     */
    200: Array<PublicSessionOutput>;
};

export type ListSessionsV1SessionListGetResponse = ListSessionsV1SessionListGetResponses[keyof ListSessionsV1SessionListGetResponses];

export type GetV1SessionGetGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Session Id
         */
        session_id: string;
    };
    url: '/v1/session/get';
};

export type GetV1SessionGetGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetV1SessionGetGetError = GetV1SessionGetGetErrors[keyof GetV1SessionGetGetErrors];

export type GetV1SessionGetGetResponses = {
    /**
     * Response Get V1 Session Get Get
     * Successful Response
     */
    200: PublicSessionOutput | null;
};

export type GetV1SessionGetGetResponse = GetV1SessionGetGetResponses[keyof GetV1SessionGetGetResponses];

export type GenerateNameV1SessionGenerateNameGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Session Id
         */
        session_id: string;
    };
    url: '/v1/session/generate_name';
};

export type GenerateNameV1SessionGenerateNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateNameV1SessionGenerateNameGetError = GenerateNameV1SessionGenerateNameGetErrors[keyof GenerateNameV1SessionGenerateNameGetErrors];

export type GenerateNameV1SessionGenerateNameGetResponses = {
    /**
     * Successful Response
     */
    200: OpResult;
};

export type GenerateNameV1SessionGenerateNameGetResponse = GenerateNameV1SessionGenerateNameGetResponses[keyof GenerateNameV1SessionGenerateNameGetResponses];

export type GenerateV1SessionGeneratePostData = {
    body: SessionRequest;
    path?: never;
    query?: never;
    url: '/v1/session/generate';
};

export type GenerateV1SessionGeneratePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateV1SessionGeneratePostError = GenerateV1SessionGeneratePostErrors[keyof GenerateV1SessionGeneratePostErrors];

export type GenerateV1SessionGeneratePostResponses = {
    /**
     * Successful Response
     */
    200: SessionResponse;
};

export type GenerateV1SessionGeneratePostResponse = GenerateV1SessionGeneratePostResponses[keyof GenerateV1SessionGeneratePostResponses];

export type AttachFileV1SessionAttachFilePostData = {
    body: Attachment;
    path?: never;
    query?: never;
    url: '/v1/session/attach_file';
};

export type AttachFileV1SessionAttachFilePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AttachFileV1SessionAttachFilePostError = AttachFileV1SessionAttachFilePostErrors[keyof AttachFileV1SessionAttachFilePostErrors];

export type AttachFileV1SessionAttachFilePostResponses = {
    /**
     * Successful Response
     */
    200: OpResult;
};

export type AttachFileV1SessionAttachFilePostResponse = AttachFileV1SessionAttachFilePostResponses[keyof AttachFileV1SessionAttachFilePostResponses];

export type DetachFileV1SessionDetachFilePostData = {
    body: DetachFileRequest;
    path?: never;
    query?: never;
    url: '/v1/session/detach_file';
};

export type DetachFileV1SessionDetachFilePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DetachFileV1SessionDetachFilePostError = DetachFileV1SessionDetachFilePostErrors[keyof DetachFileV1SessionDetachFilePostErrors];

export type DetachFileV1SessionDetachFilePostResponses = {
    /**
     * Successful Response
     */
    200: OpResult;
};

export type DetachFileV1SessionDetachFilePostResponse = DetachFileV1SessionDetachFilePostResponses[keyof DetachFileV1SessionDetachFilePostResponses];

export type AttachLogsV1SessionAttachLogsPostData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Session Id
         */
        session_id: string;
        /**
         * Logs Hash
         */
        logs_hash: string;
    };
    url: '/v1/session/attach_logs';
};

export type AttachLogsV1SessionAttachLogsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AttachLogsV1SessionAttachLogsPostError = AttachLogsV1SessionAttachLogsPostErrors[keyof AttachLogsV1SessionAttachLogsPostErrors];

export type AttachLogsV1SessionAttachLogsPostResponses = {
    /**
     * Successful Response
     */
    200: OpResult;
};

export type AttachLogsV1SessionAttachLogsPostResponse = AttachLogsV1SessionAttachLogsPostResponses[keyof AttachLogsV1SessionAttachLogsPostResponses];

export type FeedbackV1SessionFeedbackPostData = {
    body: Feedback;
    path?: never;
    query?: never;
    url: '/v1/session/feedback';
};

export type FeedbackV1SessionFeedbackPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type FeedbackV1SessionFeedbackPostError = FeedbackV1SessionFeedbackPostErrors[keyof FeedbackV1SessionFeedbackPostErrors];

export type FeedbackV1SessionFeedbackPostResponses = {
    /**
     * Successful Response
     */
    200: OpResult;
};

export type FeedbackV1SessionFeedbackPostResponse = FeedbackV1SessionFeedbackPostResponses[keyof FeedbackV1SessionFeedbackPostResponses];

export type InfoV1UserInfoGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/user/info';
};

export type InfoV1UserInfoGetResponses = {
    /**
     * Successful Response
     */
    200: UserInfo;
};

export type InfoV1UserInfoGetResponse = InfoV1UserInfoGetResponses[keyof InfoV1UserInfoGetResponses];

export type CompleteChatCompletionsPostData = {
    body: ChatCompletionRequest;
    path?: never;
    query?: never;
    url: '/chat/completions';
};

export type CompleteChatCompletionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CompleteChatCompletionsPostError = CompleteChatCompletionsPostErrors[keyof CompleteChatCompletionsPostErrors];

export type CompleteChatCompletionsPostResponses = {
    /**
     * Successful Response
     */
    200: ChatCompletionResponse;
};

export type CompleteChatCompletionsPostResponse = CompleteChatCompletionsPostResponses[keyof CompleteChatCompletionsPostResponses];

export type TsMockV1ExperimentalTsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/experimental/ts';
};

export type TsMockV1ExperimentalTsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetToolsV1SystemToolsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/system/tools';
};

export type GetToolsV1SystemToolsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAgentV1SystemAgentGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Height
         */
        height?: number;
        /**
         * Experimental
         */
        experimental?: boolean;
    };
    url: '/v1/system/agent';
};

export type GetAgentV1SystemAgentGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAgentV1SystemAgentGetError = GetAgentV1SystemAgentGetErrors[keyof GetAgentV1SystemAgentGetErrors];

export type GetAgentV1SystemAgentGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAgentPromptsV1SystemPromptsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Experimental
         */
        experimental?: boolean;
    };
    url: '/v1/system/prompts';
};

export type GetAgentPromptsV1SystemPromptsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAgentPromptsV1SystemPromptsGetError = GetAgentPromptsV1SystemPromptsGetErrors[keyof GetAgentPromptsV1SystemPromptsGetErrors];

export type GetAgentPromptsV1SystemPromptsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAgentsGraphV1SystemGraphGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Model String
         */
        model_string?: string;
        /**
         * Can Log
         */
        can_log?: boolean;
        /**
         * Toolsets To Enable
         */
        toolsets_to_enable?: string;
        /**
         * Toolsets To Disable
         */
        toolsets_to_disable?: string;
    };
    url: '/v1/system/graph';
};

export type GetAgentsGraphV1SystemGraphGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAgentsGraphV1SystemGraphGetError = GetAgentsGraphV1SystemGraphGetErrors[keyof GetAgentsGraphV1SystemGraphGetErrors];

export type GetAgentsGraphV1SystemGraphGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DiagnosticsV1SystemDiagnosticGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1/system/diagnostic';
};

export type DiagnosticsV1SystemDiagnosticGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Response Health Check Health Get
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type HealthCheckHealthGetResponse = HealthCheckHealthGetResponses[keyof HealthCheckHealthGetResponses];

export type GetGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type GetGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
