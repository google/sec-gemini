name: CLI

on:
  push:
    paths:
      - ".github/workflows/cli.yml"
      - "cli/**"
  pull_request:
    paths:
      - ".github/workflows/cli.yml"
      - "cli/**"
  schedule:
    - cron: 12 4 * * 3 # every Wednesday at 4:12 UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Install nightly
        run: |
          rustup default nightly
          rustup component add clippy rustfmt
      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # This is needed to test that CHANGELOG.md is up-to-date.
          fetch-depth: 0
      # TODO(https://github.com/actions/cache/issues/1539): Just use actions/cache instead of the
      # work-around. The only relevant steps in-between are the cargo install commands.
      # BEGIN work-around
      - name: Restore cargo cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          key: cargo-home
          path: |
            ~/.cargo/bin
            ~/.cargo/.crates*
      - name: Snapshot before cargo install
        id: before
        run: |
          LIST="$(cargo install --list)"; echo "$LIST"
          HASH=$(echo "$LIST" | sha256sum | cut -f1 -d' '); echo $HASH
          echo snapshot=$HASH >> $GITHUB_OUTPUT
      - name: Install taplo
        run: cargo install taplo-cli
      - name: Snapshot after cargo install
        id: after
        run: |
          LIST="$(cargo install --list)"; echo "$LIST"
          HASH=$(echo "$LIST" | sha256sum | cut -f1 -d' '); echo $HASH
          echo snapshot=$HASH >> $GITHUB_OUTPUT
      - name: Delete cache (if snapshot changed)
        if: ${{ steps.before.outputs.snapshot != steps.after.outputs.snapshot }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ID="$(gh cache list --ref=${{ github.ref }} --key=cargo-home --json=id --jq='.[].id')"
          echo "[$ID]"
          [ -z "$ID" ] || gh cache delete "$ID"
      - name: Save cargo cache (if snapshot changed)
        if: ${{ steps.before.outputs.snapshot != steps.after.outputs.snapshot }}
        uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          key: cargo-home
          path: |
            ~/.cargo/bin
            ~/.cargo/.crates*
      # END work-around
      - name: Run tests
        run: ./ci.sh
        working-directory: cli
  package:
    needs: test
    runs-on: ${{ matrix.target }}-latest
    strategy:
      matrix:
        target: [ubuntu, macos, windows]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Install cargo-bundle (non-Windows)
        # We only build a binary for Windows because cargo-bundle fails.
        if: matrix.target != 'windows'
        # We don't cache because this is not supposed to run often.
        run: cargo install cargo-bundle
      - name: Build and package CLI (non-Windows)
        if: matrix.target != 'windows'
        run: cargo bundle --release
        working-directory: cli
      - name: Build CLI (Windows)
        if: matrix.target == 'windows'
        run: cargo build --release
        working-directory: cli
      - name: Create artifact folder
        run: mkdir ${{ matrix.target }}
      - name: Copy binary to artifact folder (non-Windows)
        if: matrix.target != 'windows'
        run: mv cli/target/release/sec-gemini ${{ matrix.target }}
      - name: Copy binary to artifact folder (Windows)
        if: matrix.target == 'windows'
        run: mv cli/target/release/sec-gemini.exe ${{ matrix.target }}
      - name: Copy package to artifact folder (Linux)
        if: matrix.target == 'ubuntu'
        run: mv cli/target/release/bundle/deb/*.deb ${{ matrix.target }}/sec-gemini.deb
      - name: Copy package to artifact folder (MacOS)
        if: matrix.target == 'macos'
        run: |
          hdiutil create -fs HFS+ -volname Sec-Gemini \
            -srcfolder cli/target/release/bundle/osx/sec-gemini.app \
            ${{ matrix.target }}/sec-gemini.dmg
          cp -r cli/target/release/bundle/osx/sec-gemini.app ${{ matrix.target }}
      - run: rustc --version --verbose > ${{ matrix.target }}/rustc.txt
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}
  release:
    needs: package
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' }}
    permissions:
      attestations: write
      contents: write
      id-token: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Make sure the CLI version is a release
        run: sed -n '/^version = ".*"$/{p;/"[^-]*"/q;q1}' cli/Cargo.toml
      - name: Download artifact (Linux)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ubuntu
          path: linux
      - name: Download artifact (MacOS)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: macos
          path: macos
      - name: Download artifact (Windows)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: windows
          path: windows
      - name: Prepare artifacts
        run: |
          mkdir artifacts
          copy_binary() {
            cp $1/sec-gemini$2 artifacts/sec-gemini_$(sed -n 's/^host: //p' $1/rustc.txt)$2
          }
          copy_binary linux
          copy_binary macos
          copy_binary windows .exe
          cp linux/sec-gemini.deb artifacts
          cp macos/sec-gemini.dmg artifacts
      - name: Attest artifacts
        uses: actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd # v2.3.0
        with:
          subject-path: artifacts
      - name: Publish release
        run: |
          ( cd artifacts && sha256sum * > sha256sum.txt )
          ls -1 artifacts/* > artifacts.txt
          VERSION=$(sed -n 's/^version = "\(.*\)"$/\1/p' cli/Cargo.toml)
          echo "## v$VERSION" >> notes.txt
          sed -n '3,/^## /{/^## /d;p}' cli/CHANGELOG.md >> notes.txt
          COMMIT=$(git rev-parse -q --verify HEAD)
          xargs --arg-file=artifacts.txt --delimiter='\n' \
            gh release create cli-v$VERSION --target=$COMMIT \
            --title="CLI v$VERSION" --notes-file=notes.txt
        env:
          GH_TOKEN: ${{ github.token }}
